#!/usr/bin/python3
import argparse
import http.server
import jinja2
import json
import os
import re
import socket
import socketserver
import yaml

from run_tools.build_website import BuildWebsite


def get_args():
    parser = argparse.ArgumentParser(description='Process some integers.')
    parser.add_argument('mode', choices=('build', 'serve', 'reorder'))
    
    return parser.parse_args()


def run_task(task, hash_cache):
    for dep_task in task.get_dependencies():
        run_task(dep_task, hash_cache)

    input_hash = task.input_digest()
    output_hash = task.output_digest()
    if input_hash and output_hash:
        if hash_cache.get(input_hash) == output_hash:
            print('skipping ' + task.name())
            return

    print('running ' + task.name())
    task.run()
    output_hash = task.output_digest()

    if input_hash and output_hash:
        hash_cache[input_hash] = output_hash


def load_config(config_file):
    with open(config_file) as fp:
        return yaml.load(fp)

def load_hash_cache(path):
    try:
        return json.loads(open(path, 'rb').read().decode('utf8'))
    except FileNotFoundError:
        return {}

def save_hash_cache(cache, path):
    open(path, 'wb').write(json.dumps(cache).encode('utf8'))


def serve():
    PORT = 8000

    class MyTCPServer(socketserver.TCPServer):
        def server_bind(self):
            self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            self.socket.bind(self.server_address)

    Handler = http.server.SimpleHTTPRequestHandler
    httpd = MyTCPServer(("0.0.0.0", PORT), Handler)

    print("serving at port", PORT)
    httpd.serve_forever()

def build():
    root_dir = os.path.dirname(os.path.realpath(__file__))
    config_path = os.path.join(root_dir, 'config.yaml')
    build_dir = os.path.join(root_dir, '_build')
    static_dir = os.path.join(root_dir, 'static')
    photos_dir = os.path.join(root_dir, 'photos')
    template_dir = os.path.join(root_dir, 'templates')

    config = load_config(config_path)

    templateLoader = jinja2.FileSystemLoader(searchpath=template_dir)
    template_env = jinja2.Environment(loader=templateLoader)

    hash_cache = load_hash_cache('.hash_cache')
    run_task(BuildWebsite(config, static_dir, photos_dir, build_dir, template_env), hash_cache)
    save_hash_cache(hash_cache, '.hash_cache')

def reorder():
    def rename_next(parent, f):
        i = 1
        while 1:
            path = os.path.join(parent, f)
            newpath = os.path.join(parent, '%02d.jpg' % i)
            if not os.path.exists(newpath):
                print('renaming %s to %s' % (path, newpath))
                os.rename(path, newpath)
                return
            i += 1

    def rename_lower(parent, f):
        assert re.match('^[0-9]+.jpg$', f)
        i = 1
        while 1:
            path = os.path.join(parent, f)
            newpath = os.path.join(parent, '%02d.jpg' % i)
            if path == newpath:
                return
            if not os.path.exists(newpath):
                print('renaming %s to %s' % (path, newpath))
                os.rename(path, newpath)
                return
            i += 1

    root_dir = os.path.dirname(os.path.realpath(__file__))
    photos_dir = os.path.join(root_dir, 'photos')
    for x in os.listdir(photos_dir):
        parent = os.path.join(photos_dir, x)
        for f in sorted(os.listdir(parent)):
            if re.match('^[0-9]+.jpg$', f):
                rename_lower(parent, f)
                continue
            rename_next(parent, f)

        for i, f in enumerate(sorted(os.listdir(parent))):
            i += 1
            path = os.path.join(parent, f)
            newpath = os.path.join(parent, '%02d.jpg' % i)
            if path != newpath:
                print('renaming %s to %s' % (path, newpath))
                assert not os.path.exists(newpath)
                os.rename(path, newpath)






if __name__ == '__main__':
    args = get_args()
    commands = {
        'build': build,
        'serve': serve,
        'reorder': reorder,
        }
    commands[args.mode]()
